package com.hiretaxi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hiretaxi.model.Post;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST".
*/
public class PostDao extends AbstractDao<Post, Long> {

    public static final String TABLENAME = "POST";

    /**
     * Properties of entity Post.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SaveDbObjectId = new Property(1, String.class, "saveDbObjectId", false, "SAVE_DB_OBJECT_ID");
        public final static Property SavePostObjectId = new Property(2, String.class, "savePostObjectId", false, "SAVE_POST_OBJECT_ID");
        public final static Property SaveUpdateTime = new Property(3, String.class, "saveUpdateTime", false, "SAVE_UPDATE_TIME");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property StartLocation = new Property(5, String.class, "startLocation", false, "START_LOCATION");
        public final static Property EndLocation = new Property(6, String.class, "endLocation", false, "END_LOCATION");
        public final static Property Price = new Property(7, String.class, "price", false, "PRICE");
        public final static Property Person = new Property(8, String.class, "person", false, "PERSON");
        public final static Property CarType = new Property(9, String.class, "carType", false, "CAR_TYPE");
        public final static Property State = new Property(10, Boolean.class, "state", false, "STATE");
        public final static Property CarIdCard = new Property(11, String.class, "carIdCard", false, "CAR_ID_CARD");
        public final static Property TellNumber = new Property(12, String.class, "tellNumber", false, "TELL_NUMBER");
        public final static Property ImgUrlCache = new Property(13, String.class, "imgUrlCache", false, "IMG_URL_CACHE");
    }


    public PostDao(DaoConfig config) {
        super(config);
    }
    
    public PostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SAVE_DB_OBJECT_ID\" TEXT," + // 1: saveDbObjectId
                "\"SAVE_POST_OBJECT_ID\" TEXT," + // 2: savePostObjectId
                "\"SAVE_UPDATE_TIME\" TEXT," + // 3: saveUpdateTime
                "\"TITLE\" TEXT," + // 4: title
                "\"START_LOCATION\" TEXT," + // 5: startLocation
                "\"END_LOCATION\" TEXT," + // 6: endLocation
                "\"PRICE\" TEXT," + // 7: price
                "\"PERSON\" TEXT," + // 8: person
                "\"CAR_TYPE\" TEXT," + // 9: carType
                "\"STATE\" INTEGER," + // 10: state
                "\"CAR_ID_CARD\" TEXT," + // 11: carIdCard
                "\"TELL_NUMBER\" TEXT," + // 12: tellNumber
                "\"IMG_URL_CACHE\" TEXT);"); // 13: imgUrlCache
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Post entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String saveDbObjectId = entity.getSaveDbObjectId();
        if (saveDbObjectId != null) {
            stmt.bindString(2, saveDbObjectId);
        }
 
        String savePostObjectId = entity.getSavePostObjectId();
        if (savePostObjectId != null) {
            stmt.bindString(3, savePostObjectId);
        }
 
        String saveUpdateTime = entity.getSaveUpdateTime();
        if (saveUpdateTime != null) {
            stmt.bindString(4, saveUpdateTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String startLocation = entity.getStartLocation();
        if (startLocation != null) {
            stmt.bindString(6, startLocation);
        }
 
        String endLocation = entity.getEndLocation();
        if (endLocation != null) {
            stmt.bindString(7, endLocation);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(8, price);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(9, person);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(10, carType);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(11, state ? 1L: 0L);
        }
 
        String carIdCard = entity.getCarIdCard();
        if (carIdCard != null) {
            stmt.bindString(12, carIdCard);
        }
 
        String tellNumber = entity.getTellNumber();
        if (tellNumber != null) {
            stmt.bindString(13, tellNumber);
        }
 
        String imgUrlCache = entity.getImgUrlCache();
        if (imgUrlCache != null) {
            stmt.bindString(14, imgUrlCache);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Post entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String saveDbObjectId = entity.getSaveDbObjectId();
        if (saveDbObjectId != null) {
            stmt.bindString(2, saveDbObjectId);
        }
 
        String savePostObjectId = entity.getSavePostObjectId();
        if (savePostObjectId != null) {
            stmt.bindString(3, savePostObjectId);
        }
 
        String saveUpdateTime = entity.getSaveUpdateTime();
        if (saveUpdateTime != null) {
            stmt.bindString(4, saveUpdateTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String startLocation = entity.getStartLocation();
        if (startLocation != null) {
            stmt.bindString(6, startLocation);
        }
 
        String endLocation = entity.getEndLocation();
        if (endLocation != null) {
            stmt.bindString(7, endLocation);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(8, price);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(9, person);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(10, carType);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(11, state ? 1L: 0L);
        }
 
        String carIdCard = entity.getCarIdCard();
        if (carIdCard != null) {
            stmt.bindString(12, carIdCard);
        }
 
        String tellNumber = entity.getTellNumber();
        if (tellNumber != null) {
            stmt.bindString(13, tellNumber);
        }
 
        String imgUrlCache = entity.getImgUrlCache();
        if (imgUrlCache != null) {
            stmt.bindString(14, imgUrlCache);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Post readEntity(Cursor cursor, int offset) {
        Post entity = new Post( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // saveDbObjectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // savePostObjectId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // saveUpdateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startLocation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endLocation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // person
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // carType
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // state
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // carIdCard
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tellNumber
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // imgUrlCache
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Post entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaveDbObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSavePostObjectId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSaveUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPerson(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCarType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setState(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setCarIdCard(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTellNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImgUrlCache(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Post entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Post entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Post entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
